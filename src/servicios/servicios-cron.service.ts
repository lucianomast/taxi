import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ServiciosService } from './servicios.service';

@Injectable()
export class ServiciosCronService {
  private readonly logger = new Logger(ServiciosCronService.name);

  constructor(private readonly serviciosService: ServiciosService) {}

  /**
   * Tarea programada que se ejecuta cada 45 minutos
   * Procesa servicios hu√©rfanos autom√°ticamente
   */
  @Cron('0 */45 * * * *') // Cada 45 minutos
  async procesarServiciosHuerfanosAutomatico() {
    this.logger.log('üïê Ejecutando tarea programada: Procesamiento de servicios hu√©rfanos');
    
    try {
      const resultado = await this.serviciosService.procesarServiciosHuerfanos();
      
      this.logger.log(`‚úÖ Tarea programada completada: ${resultado.serviciosAsignados} servicios asignados, ${resultado.serviciosFallidos} fallidos`);
      
      // Log detallado de resultados
      if (resultado.serviciosProcesados > 0) {
        this.logger.log(`üìä Resumen: ${resultado.serviciosProcesados} servicios procesados`);
        
        resultado.resultados.forEach((resultado: any) => {
          if (resultado.estado === 'asignado') {
            this.logger.log(`‚úÖ Servicio ${resultado.servicioId} asignado a ${resultado.conductorNombre} (${resultado.tiempoEstimado})`);
          } else {
            this.logger.warn(`‚ö†Ô∏è Servicio ${resultado.servicioId} fall√≥: ${resultado.motivo}`);
          }
        });
      }
    } catch (error) {
      this.logger.error('‚ùå Error en tarea programada de servicios hu√©rfanos:', error);
    }
  }

  /**
   * Tarea programada que se ejecuta cada hora para monitoreo
   * Verifica el estado de los servicios hu√©rfanos
   */
  @Cron(CronExpression.EVERY_HOUR)
  async monitorearServiciosHuerfanos() {
    this.logger.log('üîç Monitoreo de servicios hu√©rfanos - Verificando estado del sistema');
    
    try {
      // Aqu√≠ podr√≠as agregar l√≥gica adicional de monitoreo
      // Por ejemplo, contar servicios hu√©rfanos, enviar alertas, etc.
      this.logger.log('üìà Monitoreo de servicios hu√©rfanos completado');
    } catch (error) {
      this.logger.error('‚ùå Error en monitoreo de servicios hu√©rfanos:', error);
    }
  }
}
